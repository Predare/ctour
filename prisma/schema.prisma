// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:503553Danil2030@localhost:5432/cinemaTour"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @db.Timestamp()
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  avatar        Emoji     @default(ALIEN)
  color         String    @default("#FFFFFF")
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  commentVotes  Vote[]
  rank          Rank?     @relation("rank", fields: [rankId], references: [id])
  rankId        Int?
  nextRank      Rank?     @relation("nextRank", fields: [nextRankId], references: [id])
  nextRankId    Int?
  expirence     Int       @default(0)
  followers     User[]    @relation("subscriptions")
  subscribes    User[]    @relation("subscriptions")
  reviews       Review[]
  views         Views[]
  createdReport Report[]

  @@map("users")
}

model Review {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @db.Timestamp()
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  film       Film      @relation(fields: [filmLink], references: [link], onDelete: Cascade)
  filmLink   String
  text       String
  rating     Int       @default(1)
  votes      Vote[]
  viewsCount Int       @default(0)
  views      Views[]
  comments   Comment[]
  report     Report[]

  @@unique([filmLink, authorId])
}

model Views {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int

  @@unique([reviewId, userId])
}

model Rank {
  id                Int    @id @default(autoincrement())
  name              String
  color             String
  requiredExpirence Int
  owners            User[] @relation("rank")
  nextOwners        User[] @relation("nextRank")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum FilmType {
  FILM
  SERIAL
}

model Film {
  id                 Int           @id @default(autoincrement())
  type               FilmType      @default(FILM)
  name               String
  description        String
  genres             Genre[]
  directors          Stuff[]       @relation("directors")
  actors             Stuff[]       @relation("actors")
  selections         Selection[]
  screenshots        String[]
  yearStart          Int
  yearEnd            Int?
  season             Int[]
  ageRestriction     Int?
  comments           Comment[]
  expectedPopularity Float?
  link               String        @unique
  voice              VoiceStudio[]
  quality            String?
  kinopoiskRating    Float?
  imdbRating         Float?
  rating             Float?
  ratingEmoji        Int[]
  posterLink         String?
  views              Int
  popularity         Float
  country            Country[]
  reviews            Review[]
}

enum Emoji {
  CLOWN
  GHOST
  ALIEN
  CRAB
  ROBOT
  PUMPKIN
  CAT
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @db.Timestamp()
  votes     Vote[]
  text      String
  film      Film?    @relation(fields: [filmLink], references: [link], onDelete: Cascade)
  filmLink  String?
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int?
  report Report[]
  replyComment Comment? @relation(name: "subComments", fields: [replyCommentId], references: [id], onDelete: Cascade)
  replyCommentId Int?
  subComments Comment[] @relation(name: "subComments")
}

model Vote {
  id        Int      @id @default(autoincrement())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp()
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int?

  @@unique([reviewId, userId])
  @@unique([commentId, userId])
}

model Stuff {
  id            Int    @id @default(autoincrement())
  name          String
  photoLink     String
  yearBorn      Int
  yearDead      Int?
  directedFilms Film[] @relation("directors")
  actoredFilms  Film[] @relation("actors")
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String
  emoji String @default("ðŸ˜Ž")
  films Film[]
}

model VoiceStudio {
  id    Int    @id @default(autoincrement())
  name  String
  films Film[]
}

model Selection {
  id    Int    @id @default(autoincrement())
  name  String
  films Film[]
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String
  emoji String @default("ðŸ˜Ž")
  films Film[]
}

model Report {
  id       Int     @id @default(autoincrement())
  review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int? 
  text String?
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}
